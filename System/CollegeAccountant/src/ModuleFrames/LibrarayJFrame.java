package ModuleFrames;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import net.proteanit.sql.DbUtils;
import java.util.*;
import utils.userDao;

/**
@author Dilip Pc
 */

public class LibrarayJFrame extends javax.swing.JFrame {

    ResultSet rs = null;       
    PreparedStatement pst=null;
    private Connection con;
    public LibrarayJFrame() {
        initComponents();
        con=userDao.getConnection();
        getLibraryData();
    }
/*
    Method to fetch data from library table
    
    */
private void getLibraryData()
{
            try
            {
                String sql = "select LibrarianID,Vendor,BookMagazineOrdered,CostPerPrice,BookMagazineCost,Fine,Quantity,DateOfIssue,DateOfReturn from library";
                pst = con.prepareStatement(sql);               
                rs = pst.executeQuery();
                tableLibrary.setModel(DbUtils.resultSetToTableModel(rs));
                System.err.println( new Date().toString()+"::INSIDE LIBRARY MODULE:::");
                System.err.println( new Date().toString()+"::Library table Query:::"+sql);
            }
            catch (Exception e)
            {
                System.err.println( new Date().toString()+"::Not Connected UPDATION!!!!"+e.getMessage());                         
            }
            finally
            {
                try {
                    rs.close();
                    pst.close();
                } 
                catch (SQLException ex) {
                    
                     System.err.println( new Date().toString()+"::SQL EXCEPTION"+ex.getMessage());
                    
                }
            }
    
}
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        label_Heading = new javax.swing.JLabel();
        label_librarianID = new javax.swing.JLabel();
        label_Vendor = new javax.swing.JLabel();
        label_Fine = new javax.swing.JLabel();
        btn_Update = new javax.swing.JButton();
        txt_librarianID = new javax.swing.JTextField();
        txt_Vendor = new javax.swing.JTextField();
        txt_Fine = new javax.swing.JTextField();
        label_IssueDate = new javax.swing.JLabel();
        label_ReturnDate = new javax.swing.JLabel();
        jDate_Issue = new com.toedter.calendar.JDateChooser();
        btn_Enter = new javax.swing.JButton();
        btn_refresh = new javax.swing.JButton();
        jDate_Return = new com.toedter.calendar.JDateChooser();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableLibrary = new javax.swing.JTable();
        label_LibraryMainFrame = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Library Module Frame");
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setLocationByPlatform(true);
        setMaximumSize(new java.awt.Dimension(400, 400));
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentResized(java.awt.event.ComponentEvent evt) {
                formComponentResized(evt);
            }
        });
        getContentPane().setLayout(null);

        label_Heading.setFont(new java.awt.Font("Courier New", 1, 24)); // NOI18N
        label_Heading.setForeground(new java.awt.Color(255, 255, 255));
        label_Heading.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        label_Heading.setText("Library Module");
        getContentPane().add(label_Heading);
        label_Heading.setBounds(510, 30, 240, 50);

        label_librarianID.setFont(new java.awt.Font("Courier New", 0, 12)); // NOI18N
        label_librarianID.setForeground(new java.awt.Color(255, 255, 255));
        label_librarianID.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        label_librarianID.setText("Librarian ID    : ");
        getContentPane().add(label_librarianID);
        label_librarianID.setBounds(10, 110, 130, 30);

        label_Vendor.setFont(new java.awt.Font("Courier New", 0, 12)); // NOI18N
        label_Vendor.setForeground(new java.awt.Color(255, 255, 255));
        label_Vendor.setText("Vendor          :");
        getContentPane().add(label_Vendor);
        label_Vendor.setBounds(10, 150, 130, 30);

        label_Fine.setFont(new java.awt.Font("Courier New", 0, 12)); // NOI18N
        label_Fine.setForeground(new java.awt.Color(255, 255, 255));
        label_Fine.setText("Fine            :");
        getContentPane().add(label_Fine);
        label_Fine.setBounds(10, 190, 130, 30);

        btn_Update.setText("UPDATE");
        btn_Update.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_UpdateActionPerformed(evt);
            }
        });
        getContentPane().add(btn_Update);
        btn_Update.setBounds(10, 340, 110, 30);

        txt_librarianID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_librarianIDActionPerformed(evt);
            }
        });
        getContentPane().add(txt_librarianID);
        txt_librarianID.setBounds(150, 110, 100, 20);
        getContentPane().add(txt_Vendor);
        txt_Vendor.setBounds(150, 150, 100, 20);

        txt_Fine.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_FineActionPerformed(evt);
            }
        });
        getContentPane().add(txt_Fine);
        txt_Fine.setBounds(150, 190, 100, 20);

        label_IssueDate.setFont(new java.awt.Font("Courier New", 0, 12)); // NOI18N
        label_IssueDate.setForeground(new java.awt.Color(255, 255, 255));
        label_IssueDate.setText("Date of Issue   :");
        getContentPane().add(label_IssueDate);
        label_IssueDate.setBounds(10, 230, 130, 30);

        label_ReturnDate.setFont(new java.awt.Font("Courier New", 0, 12)); // NOI18N
        label_ReturnDate.setForeground(new java.awt.Color(255, 255, 255));
        label_ReturnDate.setText("Date of Return  :");
        getContentPane().add(label_ReturnDate);
        label_ReturnDate.setBounds(10, 280, 130, 30);

        jDate_Issue.setForeground(new java.awt.Color(255, 255, 255));
        getContentPane().add(jDate_Issue);
        jDate_Issue.setBounds(150, 230, 100, 20);

        btn_Enter.setText("Enter");
        btn_Enter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_EnterActionPerformed(evt);
            }
        });
        getContentPane().add(btn_Enter);
        btn_Enter.setBounds(260, 110, 90, 23);

        btn_refresh.setText("REFRESH");
        btn_refresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_refreshActionPerformed(evt);
            }
        });
        getContentPane().add(btn_refresh);
        btn_refresh.setBounds(160, 340, 110, 30);
        getContentPane().add(jDate_Return);
        jDate_Return.setBounds(150, 280, 100, 20);

        tableLibrary.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tableLibrary.setMaximumSize(new java.awt.Dimension(200, 64));
        tableLibrary.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableLibraryMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tableLibrary);

        getContentPane().add(jScrollPane1);
        jScrollPane1.setBounds(360, 110, 890, 120);

        label_LibraryMainFrame.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/loginbg.jpg"))); // NOI18N
        label_LibraryMainFrame.addContainerListener(new java.awt.event.ContainerAdapter() {
            public void componentAdded(java.awt.event.ContainerEvent evt) {
                label_LibraryMainFrameComponentAdded(evt);
            }
        });
        getContentPane().add(label_LibraryMainFrame);
        label_LibraryMainFrame.setBounds(0, 0, 1290, 480);
        label_LibraryMainFrame.getAccessibleContext().setAccessibleName("Library Main Frame");

        getAccessibleContext().setAccessibleParent(label_LibraryMainFrame);

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void txt_librarianIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_librarianIDActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txt_librarianIDActionPerformed

    private void txt_FineActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_FineActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txt_FineActionPerformed

    private void tableLibraryMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableLibraryMouseClicked
        
         try
       {
            int row = tableLibrary.getSelectedRow();
            String Table_Click = (tableLibrary.getModel().getValueAt(row, 0).toString());
            String sql = " select * from library where LibrarianID = '"+Table_Click+"'";
            pst = con.prepareStatement (sql);
	    rs=pst.executeQuery(sql);
            if(rs.next())
            {
               String libID = rs.getString("LibrarianID");
               txt_librarianID.setText(libID);            
           
               
               String vendor = rs.getString("Vendor");
               txt_Vendor.setText(vendor);
               
               String fine = rs.getString("Fine");
               txt_Fine.setText(fine);
               
               java.util.Date dateofIssue = rs.getDate("DateOfIssue") ;
               jDate_Issue.setDate(dateofIssue); 
               
               java.util.Date dateofReturn = rs.getDate("DateOfReturn") ;
               jDate_Return.setDate(dateofReturn);
               
               System.err.println( new Date().toString()+":: Issue Date!!!!"+dateofIssue);
               System.err.println( new Date().toString()+":: DateofReturn !!!!"+dateofReturn);
         }
                  
       }
       catch (Exception e)
       {
           System.err.println( new Date().toString()+"::Not Connected!!!!"+e.getMessage());
           
       }
         finally
            {
                try {
                    rs.close();
                    pst.close();
                } 
                catch (SQLException ex) {
                    System.err.println( new Date().toString()+"::SQL EXCEPTION"+ex.getMessage());
                   
                }
            }
    }//GEN-LAST:event_tableLibraryMouseClicked

    private void btn_UpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_UpdateActionPerformed
        // TODO add your handling code here:
             try
       {
           
            DateFormat dateFormat = new SimpleDateFormat("yyyy/MM/dd");
           
            String libID = txt_librarianID.getText();
            String vendor =  txt_Vendor.getText();
                       
            java.util.Date issueDate = jDate_Issue.getDate();
            java.util.Date returnDate = jDate_Return.getDate();
            
            int noOfDays=getDays(issueDate,returnDate);
            System.err.println( new Date().toString()+"::Total working Days between two dates = "+noOfDays);
            
            float fine = 0.0f;
            
            int finalNoDays=0;
            
            if( noOfDays < 15)
            { 
                
                fine = 0;
            }  
            else 
            {
                finalNoDays = noOfDays - 15 ;
                System.err.println( new Date().toString()+"::final days!!!!"+finalNoDays);
                fine = finalNoDays *5;
            }          
                                    
            String finalFine= String.valueOf(fine);            
            System.err.println( new Date().toString()+"::final fine!!!!"+finalFine);            
            txt_Fine.setText(finalFine);
            
            String dateOfIssue = dateFormat.format(issueDate).toString();
            String dateOfReturn = dateFormat.format(returnDate).toString();
            
            System.err.println( new Date().toString()+"::dateOfIssue!!!!"+dateOfIssue);
            System.err.println( new Date().toString()+"::dateOfReturn!!!!"+dateOfReturn);
            String sql = "update library set Vendor = '"+vendor+"', Fine = '"+fine+"' , DateOfIssue = '"+dateOfIssue+"', DateOfReturn = '"+dateOfReturn+"' where LibrarianID = '"+libID+"'";
            pst = con.prepareStatement(sql);
            pst.execute();
            System.err.println( new Date().toString()+"::Update Query!!!!"+sql);
            JOptionPane.showMessageDialog(null,"Details Updated");
                  
       }
       catch (Exception e)
       {
           System.err.println( new Date().toString()+"::Not Connected UPDATION!!!!"+e.getMessage());
                    
       }
            finally
            {
                try {
                    rs.close();
                    pst.close();
                } 
                catch (SQLException ex) {
                    System.err.println( new Date().toString()+"::SQL EXCEPTION"+ex.getMessage());
                    
                }
            }
       getLibraryData();
    }//GEN-LAST:event_btn_UpdateActionPerformed

    
    // Method to fetch No of dates between two dates
    public static int getDays(Date startDate, Date endDate) {
	    Calendar startCal;
	    Calendar endCal;
	    startCal = Calendar.getInstance();
	    startCal.setTime(startDate);
	    endCal = Calendar.getInstance();
	    endCal.setTime(endDate);
	    int workDays = 0;
            
            if(startDate.compareTo(endDate)>0)
            {
                workDays =0;
                System.err.println( new Date().toString()+"::If  end date!!!!"+workDays);
            }
            
             else
            {
            
            
	    //If working dates are same,then checking what is the day on that date.
	    if (startCal.getTimeInMillis() == endCal.getTimeInMillis()) {
	        if (startCal.get(Calendar.DAY_OF_WEEK) != Calendar.SATURDAY && startCal.get(Calendar.DAY_OF_WEEK) != Calendar.SUNDAY)
	        {
	            ++workDays;
	        }
	        }
	    /*If start date is coming after end date, Then shuffling Dates and storing dates 
	by incrementing upto end date in do-while part.*/
	    if (startCal.getTimeInMillis() > endCal.getTimeInMillis()) {
	            startCal.setTime(endDate);
	            endCal.setTime(startDate);
	    }

	    do {
	        
	        if (startCal.get(Calendar.DAY_OF_WEEK) != Calendar.SATURDAY && startCal.get(Calendar.DAY_OF_WEEK) != Calendar.SUNDAY) {
	            ++workDays;
	            }
	    startCal.add(Calendar.DAY_OF_MONTH, 1);
	        } while (startCal.getTimeInMillis() <= endCal.getTimeInMillis());
            
            System.err.println( new Date().toString()+"::If start date is  end date!!!!"+workDays);
            }
	       return workDays; 
	}
    
    // End no of days method
    private void label_LibraryMainFrameComponentAdded(java.awt.event.ContainerEvent evt) {//GEN-FIRST:event_label_LibraryMainFrameComponentAdded
        // TODO add your handling code here:
    }//GEN-LAST:event_label_LibraryMainFrameComponentAdded

    private void formComponentResized(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentResized
        
        setSize(1300, 500);
        setLocation(60, 100);
    }//GEN-LAST:event_formComponentResized

    private void btn_EnterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_EnterActionPerformed
         
        try
        {
             
            String libID = txt_librarianID.getText();             
            String sql = " select * from library where LibrarianID = '"+libID+"'";
            pst = con.prepareStatement (sql);
	    rs=pst.executeQuery(sql);
            if(rs.next())
            {
               String vendor = rs.getString("Vendor");
               txt_Vendor.setText(vendor);
               
               String fine = rs.getString("Fine");
               txt_Fine.setText(fine);
               
               java.util.Date dateofIssue = rs.getDate("DateOfIssue") ;
               jDate_Issue.setDate(dateofIssue); 
               
               java.util.Date dateofReturn = rs.getDate("DateOfReturn") ;
               jDate_Return.setDate(dateofReturn);
               
               System.err.println( new Date().toString()+":: Issue Date!!!!"+dateofIssue);
               System.err.println( new Date().toString()+":: DateofReturn !!!!"+dateofReturn);
            }
            else
            {
                JOptionPane.showMessageDialog(null,"Librarian ID Incorrect !");
            }
        }
         catch (Exception e)
       {
           System.err.println( new Date().toString()+"::Not Connected!!!!"+e.getMessage());
           
       }
         finally
            {
                try {
                    rs.close();
                    pst.close();
                } 
                catch (SQLException ex) {
                    System.err.println( new Date().toString()+"::SQL EXCEPTION"+ex.getMessage());
                   
                }
            }
    }//GEN-LAST:event_btn_EnterActionPerformed

    private void btn_refreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_refreshActionPerformed
        txt_librarianID.setText("");
        txt_Vendor.setText("");
        txt_Fine.setText(""); 
    }//GEN-LAST:event_btn_refreshActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(LibrarayJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(LibrarayJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(LibrarayJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(LibrarayJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new LibrarayJFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_Enter;
    private javax.swing.JButton btn_Update;
    private javax.swing.JButton btn_refresh;
    private com.toedter.calendar.JDateChooser jDate_Issue;
    private com.toedter.calendar.JDateChooser jDate_Return;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel label_Fine;
    private javax.swing.JLabel label_Heading;
    private javax.swing.JLabel label_IssueDate;
    private javax.swing.JLabel label_LibraryMainFrame;
    private javax.swing.JLabel label_ReturnDate;
    private javax.swing.JLabel label_Vendor;
    private javax.swing.JLabel label_librarianID;
    private javax.swing.JTable tableLibrary;
    private javax.swing.JTextField txt_Fine;
    private javax.swing.JTextField txt_Vendor;
    private javax.swing.JTextField txt_librarianID;
    // End of variables declaration//GEN-END:variables
}
